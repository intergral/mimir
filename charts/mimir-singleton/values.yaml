# Default values for mimir-singleton.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  ## The image registry e.g. docker.io or ghcr.io
  registry: docker.io
  repository: grafana/mimir
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: null

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  automountServiceAccountToken: true

## The update strategy to use when deploying new versions
updateStrategy: RollingUpdate
## Annotations for the stateful set
annotations: {}
## Annotations for the pod
podAnnotations: {}
## Labels for the pod
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 9009

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## Additional container arguments
extraArgs: {}
## -- Environment variables to add, can be in the form of key values, using valueFrom or other kubernetes forms.
## - name: SOME_ENV
##   value: some-value
## - name: SOME_KEY_IN_CONFIG
##   valueFrom:
##     configMapKeyRef:
##       name: some-config
##       key: KEY_IN_CONFIG
extraEnv: []
## -- Environment variables from secrets or configmaps to add to the pod
## - configMapRef:
##     name: some-config
extraEnvFrom: []
## -- Volume mounts to add
## - name: extra-volume
##   mountPath: /mnt/volume
##   readOnly: true
##   existingClaim: volume-claim
extraVolumeMounts: []
# -- Volumes to add
extraVolumes: []

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

config:
  multitenancy_enabled: false
  config: |
    multitenancy_enabled: {{ .Values.config.multitenancy_enabled }}
    target: all,alertmanager,compactor
  
    limits:
      out_of_order_time_window: 10m
      max_global_series_per_user: 1000000
      native_histograms_ingestion_enabled: true
  
    server:
      http_listen_port: 9009
      log_level: error
  
    ruler_storage:
      backend: filesystem
      filesystem:
        dir: /tmp/mimir/rules
  
    blocks_storage:
      backend: filesystem
      bucket_store:
        sync_dir: /tmp/mimir/tsdb-sync
      filesystem:
        dir: /tmp/mimir/data/tsdb
      tsdb:
        dir: /tmp/mimir/tsdb
    
    compactor:
      data_dir: /tmp/mimir/compactor
      sharding_ring:
        kvstore:
          store: memberlist
    
    distributor:
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: memberlist
    
    alertmanager:
      web:
          external_url: {{ .Values.alertManager.external_url }}
    
    alertmanager_storage:
      backend: local
      local:
        path: /tmp/mimir/alertmanager
  
    ingester:
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: memberlist
        replication_factor: 1
    
    store_gateway:
      sharding_ring:
        replication_factor: 1
    
    frontend:
      query_result_response_format: protobuf
  
    ruler:
      enable_api: true
      alertmanager_url: http://localhost:9009/alertmanager/

  structuredConfig: {}

## The configuration for mimir overrides module
overrides:
  ## Configuration is loaded from the secret called 'externalConfigSecretName'.
  ## If 'useExternalConfig' is true, then the configuration is not generated, just
  ## consumed.
  useExternalConfig: false
  # -- Name of the Secret or ConfigMap that contains the runtime configuration (used for naming even if config is internal).
  externalRuntimeConfigName: runtime-config
  overrides: |
    overrides: {}

alertManager:
  external_url: http://localhost:9009/alertmanager

# Should we use a persistent volume with the pod
persistence:
  # Enabled persistent volume
  enabled: false
  # Custom annotations to apply to the volume claim
  annotations: {}
  # Custom selector to apply to the volume claim
  selector:
  ## Optionally set the storage class name, if not set the cluster default will be used
  storageClassName:
  ## Set the access modes for the persistence volume
  accessModes:
    - ReadWriteOnce
  ## The size of the volume to use
  size: 10Gi

monitoring:
  enabled: false
  # The config for the service monitor
  serviceMonitor:
    # the label to use to identify this cluster
    clusterLabel: "cluster"
    # the name space to deploy the service monitor in
    namespace: null
    # additional labels to add to the service monitor
    labels: { }
    # additional annotations to add to the service monitor
    annotations: { }
    # the name space selector to use in the service monitor
    namespaceSelector: { }
    # the scape timeout
    scrapeTimeout: null
    # the scape interval
    interval: null
    # -- ServiceMonitor relabel configs to apply to samples before scraping
    # https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
    relabelings: [ ]
    # -- ServiceMonitor metric relabel configs to apply to samples before ingestion
    # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#endpoint
    metricRelabelings: [ ]
    # -- ServiceMonitor will use http by default, but you can pick https as well
    scheme: http
    # -- ServiceMonitor will use these tlsConfig settings to make the health check requests
    tlsConfig: null