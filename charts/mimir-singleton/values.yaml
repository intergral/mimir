# Default values for mimir-singleton.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  ## The image registry e.g. docker.io or ghcr.io
  registry: docker.io
  repository: grafana/mimir
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: null

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 9009

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

config:
  multitenancy_enabled: true
  target: all,alertmanager,compactor

  limits:
    out_of_order_time_window: 10m
    max_global_series_per_user: 1000000
    native_histograms_ingestion_enabled: true

  server:
    http_listen_port: 9009

  ruler_storage:
    backend: local

  blocks_storage:
    backend: local
    tsdb:
      dir: /tmp/mimir/tsdb

  alertmanager_storage:
    backend: local

  ingester:
    ring:
      replication_factor: 1

  frontend:
    query_result_response_format: protobuf

  ruler:
    enable_api: true
    alertmanager_url: http://localhost:9009/alertmanager/

monitoring:
  enabled: false
  # The config for the service monitor
  serviceMonitor:
    # the label to use to identify this cluster
    clusterLabel: "cluster"
    # the name space to deploy the service monitor in
    namespace: null
    # additional labels to add to the service monitor
    labels: { }
    # additional annotations to add to the service monitor
    annotations: { }
    # the name space selector to use in the service monitor
    namespaceSelector: { }
    # the scape timeout
    scrapeTimeout: null
    # the scape interval
    interval: null
    # -- ServiceMonitor relabel configs to apply to samples before scraping
    # https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
    relabelings: [ ]
    # -- ServiceMonitor metric relabel configs to apply to samples before ingestion
    # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#endpoint
    metricRelabelings: [ ]
    # -- ServiceMonitor will use http by default, but you can pick https as well
    scheme: http
    # -- ServiceMonitor will use these tlsConfig settings to make the health check requests
    tlsConfig: null